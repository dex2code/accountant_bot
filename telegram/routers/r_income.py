from __future__ import annotations
from loguru import logger

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import as_list, as_line, Italic

from database.classes import AccountantUser
from telegram.courier import send_text


router = Router()


@router.message(Command("income"))
@logger.catch
async def cmd_income(message: types.Message) -> None:
  logger.info(f"‚Üí Got '{message.text}' command from {message.from_user.id}@{message.chat.id}")

  try:
    user = AccountantUser()
    user.id = message.from_user.id
    user_profile = await user.get_profile()
    if user_profile is None:
      raise Exception("Not a user here - profile is None")

    message_list = message.text.split()

    if len(message_list) < 2:
      t = as_list(
        as_line(f" üíµ ‚ãÖ –í–∞—à —É–∫–∞–∑–∞–Ω–Ω—ã–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥: {user_profile.monthly_income:,}"),
        as_line(
          f"‚òù –ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,\n",
          f"–ø—Ä–∏—à–ª–∏—Ç–µ /income ", Italic("<–∑–Ω–∞—á–µ–Ω–∏–µ>"), "\n",
          f"–ù–∞–ø—Ä–∏–º–µ—Ä: /income ", Italic("1200"))
      )
      await send_text(message=message, text=t)

    else:
      new_income = int(
        message_list[1]
      )
      user_profile.monthly_income = new_income
      if not await user_profile.merge_profile():
        raise Exception("Cannot merge user profile")
      t = as_list(
        as_line(f" ü•≥ –û—Ç–ª–∏—á–Ω–æ, –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {user_profile.monthly_income:,}"),
        as_line(f" ‚òù –í–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤–∞—à–∏—Ö —Ç–µ–∫—É—â–∏—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π? –ö–æ–º–∞–Ω–¥–∞ /savings")
      )
      await send_text(message=message, text=t)

  except ValueError as E:
    logger.warning(E)
    t = as_list(
      as_line(
        f" ü§î –ö–∞–∂–µ—Ç—Å—è, –≤—ã –≤–≤–µ–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å.\n",
        f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —É–∫–∞–∑–∞–≤ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
      )
    )
    await send_text(message=message, text=t)

  except BaseException as E:
    logger.error(E)
    t = as_list(
      as_line(f" üôÄ –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!"),
      as_line(f" ‚òù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start")
    )
    await send_text(message=message, text=t)

  return None
