from __future__ import annotations
from loguru import logger

from aiogram import Router, types
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.utils.formatting import as_list, as_line, Italic

from database.classes import AccountantUser
from telegram.courier import send_text


router = Router()


@router.message(CommandStart())
@logger.catch
async def cmd_start(message: types.Message, state: FSMContext) -> None:
  logger.info(f"‚Üí Got '{message.text}' command from {message.from_user.id}@{message.chat.id}")

  try:
    await state.clear()
    await send_text(
      message=message,
      text=as_line("–ü—Ä–∏–≤–µ—Ç! üëã"),
      reply=True,
      markup=types.ReplyKeyboardRemove()
    )

    user = AccountantUser()
    user.id = message.from_user.id
    user_profile = await user.get_profile()

    if user_profile is None:
      if not await user.create_profile():
        raise Exception(f"Cannot create user profile")
      t = as_list(
        as_line(f"üßê –Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞—Ç—å –≤–∞—à–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ —Ç—Ä–∞—Ç—ã, —Ç–∞–∫ —á—Ç–æ –≤—ã —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç–µ –∑–Ω–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±—é–¥–∂–µ—Ç–∞."),
        as_line("–†–∞–±–æ—Ç–∞—Ç—å —Å–æ –º–Ω–æ–π –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ: –≤ –Ω–∞—á–∞–ª–µ –≤—ã —É–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–≤–æ–π –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥, —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—É—â–∏—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü."),
        as_line("–î–∞–ª–µ–µ, –≤—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Ç—Ä–∞—Ç—ã: –º–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –∂–µ —Ä–∞–∑ –≤ –¥–µ–Ω—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –º–Ω–µ —Å—É–º–º—É –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–≥–æ."),
        as_line("–ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –º–∏–Ω–∏-–æ—Ç—á–µ—Ç –æ —Ç–æ–º, –∫–∞–∫ –∏–¥—É—Ç –Ω–∞—à–∏ –¥–µ–ª–∞ üìù"),
      )
      await send_text(message=message, text=t)

    t = as_list(
      as_line(f"‚òù –í–æ—Ç –∫–∞–∫ –º–æ–∂–Ω–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ –º–Ω–æ–π:"),
      as_line(f" üìä ‚ãÖ /report  ‚Üí –û—Ç—á–µ—Ç –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é"),
      as_line(f" üíµ ‚ãÖ /income  ‚Üí –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥"),
      as_line(f" üí∞ ‚ãÖ /savings  ‚Üí –¢–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è"),
      as_line(f" ‚úÖ ‚ãÖ /goal  ‚Üí –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è —Ü–µ–ª—å"),
      as_line(f" ‚≠ï ‚ãÖ /reset  ‚Üí –°–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è"),
      as_line(
        f" ‚úè –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞—Ç—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: ",
        Italic("1200"),
      )
    )
    await send_text(message=message, text=t)

  except BaseException as E:
    logger.error(E)
    t = as_list(
      as_line(f" üôÄ –ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!"),
      as_line(f" ‚òù –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥—ã /start")
    )
    await send_text(message=message, text=t)

  return None
